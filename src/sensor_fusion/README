    // totalWeights = 0
    // for every Particle in totalAmountOfParticles
    //     x(t) = sampleMotionModel(ut, x(t-1))
    //     weight(t) = measurementModel(z(t), x(t), Map)
    //     normalize weights
    //     totalWeights = totalWeights + Tuple of (x(t) + w(t))
    // endfor

    // ** resample Particles **
    // for every Particle in totalAmountOfParticles
    //     weights.pushback(particle.weight)

    // gen = randomNumberGenerator
    // distribution(weights.begin, weights.end)

    // for every Particle in totalAmountOfParticles
    //     index = distribution(gen)
    //     resampledParticles.pushback(particles[index])

    // return resampledParticles
//////////////////////////////////////////////////////////////////////////////////////////////

// void estimatePose()
// {
//     // Initialize totalWeights to 0
//     float totalWeights = 0;
    
//     // Update particles based on motion model and calculate weights
//     for every Particle in totalAmountOfParticles
//     {
//         // Sample new particle position based on motion model
//         x(t) = sampleMotionModel(ut, x(t-1));
        
//         // Calculate the weight of the new particle based on the measurement model
//         weight(t) = measurementModel(z(t), x(t), Map);
        
//         // Add the weight of this particle to the total weight
//         totalWeights += weight(t);
//     }

//     // Normalize the weights of the particles
//     for every Particle in totalAmountOfParticles
//     {
//         weight(t) /= totalWeights;
//     }

//     // ** Resample Particles **
//     // Create a list to store weights for the resampling process
//     List<float> weights;
//     for every Particle in totalAmountOfParticles
//     {
//         // Collect weights of all particles
//         weights.pushback(particle.weight);
//     }

//     // Create a random number generator
//     gen = randomNumberGenerator;
    
//     // Create a distribution based on the weights
//     distribution = std::discrete_distribution<>(weights.begin(), weights.end());

//     // Create a list to store resampled particles
//     List<Particle> resampledParticles;

//     for every Particle in totalAmountOfParticles
//     {
//         // Sample a new particle index based on the distribution
//         index = distribution(gen);
        
//         // Add the particle at the sampled index to the resampled particles list
//         resampledParticles.pushback(particles[index]);
//     }

//     // Replace the original particles with the resampled particles
//     particles = resampledParticles;

//     // Return the resampled particles (if needed)
//     return particles;
// }
